const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// Fonction pour tester les endpoints du module d'apprentissage
async function testLearningModule() {
  console.log('üß™ Test du module d\'apprentissage...\n');

  try {
    // 1. Cr√©er un parcours d'apprentissage
    console.log('1. Cr√©ation d\'un parcours d\'apprentissage...');
    const learningPathData = {
      titre: 'Formation Cybers√©curit√©',
      description: 'Parcours complet sur la cybers√©curit√© pour d√©butants',
      public_cible: 'debutant'
    };

    const learningPathResponse = await axios.post(`${BASE_URL}/learning/parcours`, learningPathData);
    const learningPath = learningPathResponse.data;
    console.log('‚úÖ Parcours cr√©√©:', learningPath.parcours_id);

    // 2. Cr√©er un module d'apprentissage
    console.log('\n2. Cr√©ation d\'un module d\'apprentissage...');
    const moduleData = {
      titre: 'Introduction √† la cybers√©curit√©',
      description: 'Module d\'introduction aux concepts de base de la cybers√©curit√©',
      type_contenu: 'video',
      code_langue: 'fr',
      duree_minutes: 45,
      niveau_difficulte: 'facile',
      parcours_id: learningPath.parcours_id
    };

    const moduleResponse = await axios.post(`${BASE_URL}/learning/modules`, moduleData);
    const learningModule = moduleResponse.data;
    console.log('‚úÖ Module cr√©√©:', learningModule.module_id);

    // 3. Cr√©er un contenu m√©dia
    console.log('\n3. Cr√©ation d\'un contenu m√©dia...');
    const mediaData = {
      module_id: learningModule.module_id,
      type_media: 'video',
      url_fichier: 'https://example.com/video-intro-cybersecurite.mp4',
      nom_fichier: 'video-intro-cybersecurite.mp4',
      taille_fichier: 52428800, // 50MB
      description: 'Vid√©o d\'introduction √† la cybers√©curit√©'
    };

    const mediaResponse = await axios.post(`${BASE_URL}/learning/media`, mediaData);
    const mediaContent = mediaResponse.data;
    console.log('‚úÖ Contenu m√©dia cr√©√©:', mediaContent.media_id);

    // 4. R√©cup√©rer tous les parcours
    console.log('\n4. R√©cup√©ration de tous les parcours...');
    const allPathsResponse = await axios.get(`${BASE_URL}/learning/parcours`);
    console.log('‚úÖ Nombre de parcours:', allPathsResponse.data.length);

    // 5. R√©cup√©rer les modules d'un parcours
    console.log('\n5. R√©cup√©ration des modules du parcours...');
    const modulesResponse = await axios.get(`${BASE_URL}/learning/parcours/${learningPath.parcours_id}/modules`);
    console.log('‚úÖ Nombre de modules:', modulesResponse.data.length);

    // 6. R√©cup√©rer les contenus m√©dia d'un module
    console.log('\n6. R√©cup√©ration des contenus m√©dia du module...');
    const mediaResponse2 = await axios.get(`${BASE_URL}/learning/modules/${learningModule.module_id}/media`);
    console.log('‚úÖ Nombre de contenus m√©dia:', mediaResponse2.data.length);

    // 7. Cr√©er une progression (simulation)
    console.log('\n7. Cr√©ation d\'une progression...');
    const progressData = {
      utilisateur_id: 1, // Assurez-vous qu'un utilisateur avec cet ID existe
      module_id: learningModule.module_id,
      statut: 'en_cours',
      score: 0,
      temps_passe: 0
    };

    try {
      const progressResponse = await axios.post(`${BASE_URL}/learning/progress`, progressData);
      console.log('‚úÖ Progression cr√©√©e:', progressResponse.data.progression_id);
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la cr√©ation de la progression (utilisateur peut ne pas exister):', error.response?.data?.message || error.message);
    }

    // 8. Cr√©er une certification (simulation)
    console.log('\n8. Cr√©ation d\'une certification...');
    const certificationData = {
      utilisateur_id: 1, // Assurez-vous qu'un utilisateur avec cet ID existe
      parcours_id: learningPath.parcours_id,
      type_certification: 'completion',
      date_emission: new Date().toISOString(),
      url_certification: 'https://example.com/certification.pdf'
    };

    try {
      const certificationResponse = await axios.post(`${BASE_URL}/learning/certifications`, certificationData);
      console.log('‚úÖ Certification cr√©√©e:', certificationResponse.data.certification_id);
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la cr√©ation de la certification (utilisateur peut ne pas exister):', error.response?.data?.message || error.message);
    }

    // 9. Tester l'ajout d'un parcours √† une organisation
    console.log('\n9. Ajout d\'un parcours √† une organisation...');
    try {
      const orgPathResponse = await axios.post(`${BASE_URL}/learning/organisations/1/parcours/${learningPath.parcours_id}`);
      console.log('‚úÖ Parcours ajout√© √† l\'organisation:', orgPathResponse.data.id);
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de l\'ajout du parcours √† l\'organisation (organisation peut ne pas exister):', error.response?.data?.message || error.message);
    }

    // 10. R√©cup√©rer les parcours d'une organisation
    console.log('\n10. R√©cup√©ration des parcours d\'une organisation...');
    try {
      const orgPathsResponse = await axios.get(`${BASE_URL}/learning/organisations/1/parcours`);
      console.log('‚úÖ Nombre de parcours dans l\'organisation:', orgPathsResponse.data.length);
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des parcours de l\'organisation:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ Tests du module d\'apprentissage termin√©s avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.response?.data || error.message);
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  console.log('\nüßπ Nettoyage des donn√©es de test...');
  
  try {
    // Supprimer les associations organisation-parcours
    await axios.delete(`${BASE_URL}/learning/organisations/1/parcours/1`);
    console.log('‚úÖ Association organisation-parcours supprim√©e');
  } catch (error) {
    console.log('‚ö†Ô∏è Erreur lors du nettoyage:', error.response?.data?.message || error.message);
  }
}

// Ex√©cuter les tests
async function runTests() {
  await testLearningModule();
  // await cleanupTestData(); // D√©commentez pour nettoyer apr√®s les tests
}

runTests().catch(console.error);
